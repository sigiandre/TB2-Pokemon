{"remainingRequest":"C:\\Users\\andre\\Desktop\\pokemon\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\andre\\Desktop\\pokemon\\src\\learn\\model.js","dependencies":[{"path":"C:\\Users\\andre\\Desktop\\pokemon\\src\\learn\\model.js","mtime":1623971952149},{"path":"C:\\Users\\andre\\Desktop\\pokemon\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\andre\\Desktop\\pokemon\\node_modules\\babel-loader\\lib\\index.js","mtime":315550800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/Users/andre/Desktop/pokemon/src/learn/model.js"],"names":["tf","require","window","Generator","longestLength","vocabSize","vocab","vocabInverse","loadLayersModel","model","dataset","log","preprocess","createModel","fit","trainX","trainY","batchSize","epochs","callbacks","CustomCallback","onEpochEnd","epoch","logs","predict","yieldEvery","names","toLowerCase","split","longestName","i","length","uniqueChars","String","prototype","concat","Set","join","sort","char","Object","keys","arrayNamesIn","arrayNamesOut","forEach","name","wordIn","slice","wordOut","push","convertToOneHot","tensor3d","sequential","add","layers","lstm","units","inputShape","returnSequences","dense","activation","compile","loss","optimizer","summary","wordBeginning","newName","x","zeros","xArr","arraySync","end","newCharacter","probs","probsSum","prob","charId","randomChoices","word","encodedWord","charOneHot","randomChoice","p","rnd","reduce","a","b","Math","random","findIndex","count","Array","from","bind"],"mappings":"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","sourcesContent":["const tf = require(\"@tensorflow/tfjs\")\nwindow.tf = tf;\n\nclass Generator {\n    constructor() {}\n\n    // Carga un modelo cuando carga la página por primera vez\n    async loadModel() {\n        this.longestLength = 12\n        this.vocabSize = 28\n        this.vocab = {\n            \" \": 0, \".\": 1, \"a\": 2, \"b\": 3, \"c\": 4, \"d\": 5, \"e\": 6, \"f\": 7, \"g\": 8, \"h\": 9, \"i\": 10, \"j\": 11, \"k\": 12, \"l\": 13, \"m\": 14, \"n\": 15, \"o\": 16, \"p\": 17, \"q\": 18, \"r\": 19, \"s\": 20, \"t\": 21, \"u\": 22, \"v\": 23, \"w\": 24, \"x\": 25, \"y\": 26, \"z\": 27\n        }\n        this.vocabInverse = {\n            0: \" \", 1: \".\", 2: \"a\", 3: \"b\", 4: \"c\", 5: \"d\", 6: \"e\", 7: \"f\", 8: \"g\", 9: \"h\", 10: \"i\", 11: \"j\", 12: \"k\", 13: \"l\", 14: \"m\", 15: \"n\", 16: \"o\", 17: \"p\", 18: \"q\", 19: \"r\", 20: \"s\", 21: \"t\", 22: \"u\", 23: \"v\", 24: \"w\", 25: \"x\", 26: \"y\", 27: \"z\"\n        }\n        this.model = await tf.loadLayersModel(\"/my-model-trained-300.json\")\n    }\n\n    async createModelAndTrain(dataset, log) {\n        this.preprocess(dataset, log) // Crea conjuntos de vocabulario y entrenamiento\n        this.createModel(log) // Crea el modelo TFjs a partir de dimensiones anteriores.\n        // Entrena el modelo\n        return this.model.fit(this.trainX, this.trainY, { \n            batchSize: 64,\n            epochs: 301,\n            callbacks: [\n                new tf.CustomCallback({\n                    onEpochEnd: async(epoch, logs) => {\n                        log(\"Época \" + epoch + \"/300 terminada\")\n                        if (epoch % 25 == 0) {\n                            // Registra 5 nombres cada 25 épocas de entrenamiento\n                            log(\"Nombre de la prueba: \" + this.predict(\"\"))\n                            log(\"Nombre de la prueba: \" + this.predict(\"\"))\n                            log(\"Nombre de la prueba: \" + this.predict(\"\"))\n                            log(\"Nombre de la prueba: \" + this.predict(\"\"))\n                            log(\"Nombre de la prueba: \" + this.predict(\"\"))\n                            log(\"========================================\")\n                        }\n                    }\n                })\n            ],\n            yieldEvery: 5000\n        })\n    }\n\n    preprocess(dataset, log) {\n        let names = dataset.toLowerCase().split(\"\\n\")\n        let longestName = \"\"\n        // Obtiene el nombre más largo, por lo que todos los demás nombres son más pequeños\n        for (let i = 0; i < names.length; i++) {\n            names[i] = names[i] + \".\"\n            if (names[i].split(\"\").length > longestName.split(\"\").length) {\n                longestName = names[i]\n            }\n        }\n        log(\"Nombre más largo: \" + longestName)\n\n        // Crea vocabulario de todos los caracteres individuales que se encuentran en el conjunto de datos\n        let uniqueChars = String.prototype.concat(...new Set(names.join(\"\"))).split(\"\").sort()\n        this.vocab = {}\n        this.vocabInverse = {}\n        for (let i = 0; i < uniqueChars.length; i++) {\n            const char = uniqueChars[i];\n            this.vocab[char] = i\n            this.vocabInverse[i] = char\n        }\n        log(\"Vocabulario: \" + Object.keys(this.vocab))\n\n        this.vocabSize = Object.keys(this.vocab).length\n        this.longestLength = longestName.length - 1\n\n        // Crea matrices de vectores de entrada y salida convirtiendo los nombres en\n        // one-hots de tamaño igual al tamaño más largo (lleno de ceros en el resto)\n        let arrayNamesIn = []\n        let arrayNamesOut = []\n        names.forEach(name => {\n            const wordIn = name.split(\"\").slice(0, name.split(\"\").length - 1)\n            const wordOut = name.split(\"\").slice(1, name.split(\"\").length)\n            arrayNamesIn.push(this.convertToOneHot(wordIn, this.vocab))\n            arrayNamesOut.push(this.convertToOneHot(wordOut, this.vocab))\n        });\n\n        log(\"Número de muestras: \" + arrayNamesIn.length)\n\n        // Convierte matrices en tensores de entrenamiento de entrada y salida\n        this.trainX = tf.tensor3d(arrayNamesIn)\n        this.trainY = tf.tensor3d(arrayNamesOut)\n    }\n\n    createModel(log) {\n        // El modelo es solo un tipo secuencial con dos capas (lstm y denso)\n        // para la salida\n        this.model = tf.sequential()\n        this.model.add(tf.layers.lstm({\n            units: 128,\n            inputShape: [this.longestLength, this.vocabSize],\n            returnSequences: true\n        }))\n        this.model.add(tf.layers.dense({ \n            units: this.vocabSize, activation: \"softmax\" \n        }))\n\n        this.model.compile({ \n            loss: \"categoricalCrossentropy\",\n            optimizer: \"adam\"\n        })\n        \n        this.model.summary()\n    \n        log(\"Resumen impreso en la consola\")\n    }\n\n    // Muestra una palabra completa con el modelo. wordBeginning puede estar vacío, por lo que es un\n    // palabra completamente nueva, o puede tener algunos caracteres para completarla.\n    predict(wordBeginning) {\n        let newName = wordBeginning.split(\"\")\n        let x = tf.zeros([1, this.longestLength, this.vocabSize]) // Crea un tensor de ceros del tamaño de la palabra\n        let xArr = x.arraySync()\n        // Rellena el tensor con puntos únicos correspondientes a los caracteres de la palabra Principio\n        for (let i = 0; i < wordBeginning.split(\"\").length; i++) {\n            const char = wordBeginning.split(\"\")[i];\n            xArr[0][i][this.vocab[char]] = 1\n        }\n        x = tf.tensor3d(xArr)\n        let end = false\n        let i = wordBeginning.split(\"\").length\n\n        // Itera para probar cada nuevo personaje con el nuevo nombre\n        while (!end) {\n            let newCharacter\n            if (i == this.longestLength) {\n                // Si es demasiado largo, termínelo con un punto.\n                newCharacter = \".\"\n                newName.push(newCharacter)\n                end = true\n            } else {\n                // Predice nuevo carácter de todas las anteriores.\n                let probs = this.model.predict(x).arraySync()[0][i]\n                let probsSum = 0\n                probs.forEach(prob => {\n                    probsSum += prob\n                });\n                for (let i = 0; i < probs.length; i++) {\n                    probs[i] = probs[i] / probsSum;\n                }\n\n                let charId = randomChoices(probs, 1)[0]\n                newCharacter = this.vocabInverse[charId]\n                newName.push(newCharacter)\n                let xArr = x.arraySync()\n                xArr[0][i][charId] = 1\n                x = tf.tensor3d(xArr)\n\n                if (newCharacter == \".\") {\n                    end = true\n                }\n\n                i += 1\n            }\n        }\n\n        return newName.join(\"\")\n    }\n\n    convertToOneHot(word, vocab) {\n        let encodedWord = []\n        // Convierte en one-hot todos los personajes del mundo\n        word.forEach(char => {\n            let charOneHot = []\n            for (let i = 0; i < Object.keys(vocab).length; i++) {\n                if (vocab[char] == i) {\n                    charOneHot.push(1)\n                } else {\n                    charOneHot.push(0)\n                }                \n            }\n            encodedWord.push(charOneHot)\n        });\n\n        // Y convertir a una matriz de ceros todo lo que queda por más tiempo\n        for (let i = word.length; i < this.longestLength; i++) {\n            let charOneHot = []\n            for (let i = 0; i < Object.keys(vocab).length; i++) {\n                charOneHot.push(0)\n            }\n            encodedWord.push(charOneHot)\n        }\n\n        return encodedWord\n    }\n}\n\nfunction randomChoice(p) {\n    let rnd = p.reduce( (a, b) => a + b ) * Math.random();\n    return p.findIndex( a => (rnd -= a) < 0 );\n}\n\nfunction randomChoices(p, count) {\n    return Array.from(Array(count), randomChoice.bind(null, p));\n}\n\nexport default Generator"]}]}